openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:7000
    description: Generated server url
paths:
  /tournament/join:
    post:
      tags:
        - tournament-controller
      summary: Join a tournament by its id
      operationId: joinTournament
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int64
        required: true
      responses:
        '200':
          description: Successfully joined a Tournament
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MyTournament'
      security:
        - Auth0: []
  /tournament/create:
    post:
      tags:
        - tournament-controller
      summary: Create a tournament
      operationId: createTournament
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: Successfully created a new Tournament
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MyTournament'
      security:
        - Auth0: []
  /tournament/addGame:
    post:
      tags:
        - tournament-controller
      summary: Add a new game to a Tournament
      operationId: addGameToTournament
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tournamentId:
                  type: integer
                  format: int64
                gameName:
                  type: string
        required: true
      responses:
        '200':
          description: Successfully added a new Game to this Tournament
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Game'
      security:
        - Auth0: []
  /tournament/{tournamentId}:
    get:
      tags:
        - tournament-controller
      summary: Fetch a tournament by its id
      operationId: getTournament
      parameters:
        - name: tournamentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully fetched the Tournament
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MyTournament'
      security:
        - Auth0: []
  /tournament/myTournaments:
    get:
      tags:
        - tournament-controller
      summary: Fetch all tournaments where user participate
      operationId: getMyTournaments
      responses:
        '200':
          description: Successfully fetched my Tournaments
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MyTournament'
      security:
        - Auth0: []
components:
  schemas:
    Bet:
      required:
        - amount
      type: object
      properties:
        id:
          type: integer
          format: int64
        amount:
          type: integer
          format: int32
    Game:
      required:
        - bets
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        bets:
          type: array
          items:
            $ref: '#/components/schemas/Bet'
        name:
          type: string
    MyTournament:
      required:
        - games
        - myTokens
        - name
        - owner
        - participants
        - startingTokens
      type: object
      properties:
        tournament:
          $ref: '#/components/schemas/Tournament'
        myTokens:
          type: number
          format: float
        id:
          type: integer
          format: int64
        name:
          type: string
        games:
          type: array
          items:
            $ref: '#/components/schemas/Game'
        owner:
          $ref: '#/components/schemas/User'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'
        startingTokens:
          type: number
          format: float
    Tournament:
      required:
        - games
        - name
        - owner
        - participants
        - startingTokens
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        games:
          type: array
          items:
            $ref: '#/components/schemas/Game'
        owner:
          $ref: '#/components/schemas/User'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'
        startingTokens:
          type: number
          format: float
    User:
      required:
        - id
      type: object
      properties:
        id:
          type: string
  securitySchemes:
    Auth0:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https:/dev-sponge.eu.auth0.com/authorize?audience=https://friendly-custom-bets-api.sponge.com
          scopes: {}
